module Binary_search

  use int.Int
  use int.ComputerDivision
  use ref.Ref
  use array.Array

  exception Break int

  let binary_search (a: array int) (v: int)
    requires { forall i : int. 0 <= i < length a - 1 -> a[i] <= a[i+1] }
    ensures { 0 <= result < length a -> a[result] = v }
    =
    let l = ref 0 in
    let u = ref (length a - 1) in
    try
      while !l <= !u do
        variant{!u - !l}
        invariant{!l >= 0 /\ !u < length a}
        let m = div (!l + !u) 2 in
        if a[m] < v then l := m + 1
        else if a[m] > v then u := m - 1
        else raise (Break m)
      done;
      -1
    with Break m ->
      m
    end

end